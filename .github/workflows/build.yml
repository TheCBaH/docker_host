name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_NAMESPACE: github_${{ github.workflow }}_${{ github.job }}
      KVM_DISABLE: 'yes'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, alpine, alpine-uefi]
        version: [none]
        exclude:
          - version: none
        include:
          - os: ubuntu
            version: 16.04
          - os: ubuntu
            version: 18.04
          - os: ubuntu
            version: 20.04
          - os: alpine
            version: 3.14
          - os: alpine
            version: 3.13
          - os: alpine
            version: 3.12
          - os: alpine
            version: 3.11
          - os: alpine
            version: '3.10'
          - os: alpine
            version: 3.9
          - os: alpine-uefi
            version: 3.14
          - os: alpine-uefi
            version: 3.13
          - os: alpine-uefi
            version: 3.12
          - os: alpine-uefi
            version: 3.11
          - os: alpine-uefi
            version: '3.10'
          - os: alpine-uefi
            version: 3.9
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: kvm.image
      run: |
        set -x
        image=$(make -C docker_kvm --no-print-directory image.print)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITHUB_REPOSITORY/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        old_id=''
        if docker pull $IMAGE_ID; then
          old_id=$(docker image inspect $IMAGE_ID --format "{{.ID}}")
        fi
        make -C docker_kvm kvm_image DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID"
        new_id=$(docker image inspect $image --format "{{.ID}}")
        if [ "$old_id" != "$new_id" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag $image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest || true
          rm -rf ~/.docker
        fi
    - name: ubuntu.image
      if: matrix.os == 'ubuntu'
      run: make -C docker_kvm ${{ matrix.os }}-${{ matrix.version }}.minimal_init
    - name: alpine.image
      if: matrix.os == 'alpine'
      run: |
        set -x
        sudo modprobe nbd max_part=0
        make -C docker_kvm kvm_run CMD='./kvm.sh prepare'
        make -C docker_kvm alpine-make-vm-image.image
        git -C docker_kvm/alpine-make-vm-image/ apply <docker_kvm/alpine/alpine_sync.patch
        make -C docker_kvm alpine-make-vm-image.image_run ALPINE_VERSION=${{ matrix.version }}
    - name: alpine-uefi.image
      if: matrix.os == 'alpine-uefi'
      run: |
        set -x
        make -C docker_kvm kvm_run CMD='./kvm.sh prepare'
        make -C docker_kvm ${{ matrix.os }}.img ALPINE_VERSION=${{ matrix.version }}
        echo make -C docker_kvm ${{ matrix.os }}-${{ matrix.version }}.cleanup
    - name: docker-setup
      run: make ${{ matrix.os }}-${{ matrix.version }}.docker_setup
    - name: compact.image
      if: matrix.os == 'alpine'
      run: make -C docker_kvm/ kvm_run CMD='./compact-qcow.sh data/img/${{ matrix.os }}-${{ matrix.version }}-boot.img'
    - name: docker-test
      run: make ${{ matrix.os }}-${{ matrix.version }}.docker_test
    - name: image-vhdx
      if: matrix.os == 'alpine-uefi'
      run: make -C docker_kvm alpine-uefi.vhdx ALPINE_VERSION="${{ matrix.version }}"
  images:
    runs-on: ubuntu-latest
    env:
      DOCKER_NAMESPACE: github_${{ github.workflow }}_${{ github.job }}
      VOLUME_DIR: /tmp/
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: start-cache
      run: |
        set -x
        make polipo.image
        make VOLUME_DIR=$HOME polipo.volume
        make polipo.start
        http_proxy=$(make --silent polipo.http_proxy)
        test -n "$http_proxy"
        echo "http_proxy=$http_proxy" >> $GITHUB_ENV
    - name: apt_cache
      run: |
        set -x
        make apt_cache.start
        env http_proxy=$(make --silent apt_cache.http_proxy) make apt_cache.image
        make apt_cache.cache_stats
        make apt_cache.stop
    - name: polipo_stats
      run: |
        set -x
        make -C docker_kvm alpine-make-vm-image.image
        make polipo.logs
    - run: make dnsmasq.image
    - run: make debootstrap.init
    - run: make gcloud.image
    - run: make tensorflow.image
    - run: make pytorch.image
    - run: make softether.image
    - run: make -C ceph ceph-admin.image
    - name: stop-cache
      run: |
        set -x
        make polipo.stop
        make polipo.cache_stats
  proxy:
    runs-on: ubuntu-latest
    env:
      VOLUME_DIR: /tmp/
    steps:
    - uses: actions/checkout@v2
    - name: proxy
      run: ./proxy-test.sh
    - name: proxy-in-docker
      run: |
        set -x
        make docker-cli.start
        make docker-cli.exec CMD=./proxy-test.sh
        make docker-cli.stop
  wsl:
    runs-on: windows-latest
    steps:
    - uses: Vampire/setup-wsl@v2
      with:
        distribution: Debian
    - name: Update
      shell: wsl-bash -u root {0}
      run: pwd
    - shell: wsl-bash -u root {0}
      run: id
    - shell: wsl-bash -u root {0}
      run: cat /etc/issue
  wsl-manual:
    if: false
    runs-on: windows-latest
    timeout-minutes: 15
    steps:
    - uses: actions/checkout@v2
    - name: Debian
      run: |
        Invoke-WebRequest -Uri https://aka.ms/wsl-debian-gnulinux -OutFile ./Debian.appx -UseBasicParsing
        Rename-Item .\Debian.appx .\Debian.zip
        Expand-Archive .\Debian.zip .\Debian
        cd .\Debian
        Rename-Item ./DistroLauncher-Appx_1.12.1.0_x64.appx ./Debian.zip
        Expand-Archive .\Debian.zip .\Debian
        cd .\Debian
        .\debian.exe install --root
        .\debian.exe run cat /etc/issue
    - run: pip install requests
    - name: Alpine
      shell: cmd
      run: |
        python .\wsl\alpine.py
        set
        .\Alpine.exe --user root <nul
        .\wsl\dataset.bat
  debian-upgrade:
    if: false
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - run: make debian-upgrade
